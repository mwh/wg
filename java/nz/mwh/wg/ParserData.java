package nz.mwh.wg;

import nz.mwh.wg.ast.ASTNode;

public class ParserData extends ASTConstructors {
    @SuppressWarnings("unchecked")
    public static final ASTNode program = objCons(cons(importStmt("ast", identifierDeclaration("ast", nil)), cons(varDec("modulePrefix", nil, nil, one(strLit(""))), cons(methDec(one(part("EOFToken", cons(identifierDeclaration("line", nil), one(identifierDeclaration("column", nil))))), nil, nil, one(lexReq(one(part("SymbolToken", cons(lexReq(one(part("line", nil))), cons(lexReq(one(part("column", nil))), one(strLit("EOF"))))))))), cons(methDec(one(part("NumberToken", cons(identifierDeclaration("ln", nil), cons(identifierDeclaration("col", nil), one(identifierDeclaration("val", nil)))))), nil, nil, one(objCons(cons(defDec("nature", nil, one("public"), strLit("NUMBER")), cons(defDec("value", nil, one("public"), lexReq(one(part("val", nil)))), cons(defDec("line", nil, one("public"), lexReq(one(part("ln", nil)))), cons(defDec("column", nil, one("public"), lexReq(one(part("col", nil)))), cons(methDec(one(part("asString", nil)), nil, nil, one(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(lexReq(one(part("nature", nil))), one(part("++", one(strLit("("))))), one(part("++", one(lexReq(one(part("value", nil))))))), one(part("++", one(strLit(")["))))), one(part("++", one(lexReq(one(part("line", nil))))))), one(part("++", one(strLit(":"))))), one(part("++", one(lexReq(one(part("column", nil))))))), one(part("++", one(strLit("]"))))))), one(methDec(one(part("location", nil)), nil, nil, one(dotReq(dotReq(dotReq(lexReq(one(part("modulePrefix", nil))), one(part("++", one(lexReq(one(part("line", nil))))))), one(part("++", one(strLit(":"))))), one(part("++", one(lexReq(one(part("column", nil))))))))))))))), nil))), cons(methDec(one(part("LParenToken", cons(identifierDeclaration("line", nil), one(identifierDeclaration("column", nil))))), nil, nil, one(lexReq(one(part("SymbolToken", cons(lexReq(one(part("line", nil))), cons(lexReq(one(part("column", nil))), one(strLit("LPAREN"))))))))), cons(methDec(one(part("RParenToken", cons(identifierDeclaration("line", nil), one(identifierDeclaration("column", nil))))), nil, nil, one(lexReq(one(part("SymbolToken", cons(lexReq(one(part("line", nil))), cons(lexReq(one(part("column", nil))), one(strLit("RPAREN"))))))))), cons(methDec(one(part("LBraceToken", cons(identifierDeclaration("line", nil), one(identifierDeclaration("column", nil))))), nil, nil, one(lexReq(one(part("SymbolToken", cons(lexReq(one(part("line", nil))), cons(lexReq(one(part("column", nil))), one(strLit("LBRACE"))))))))), cons(methDec(one(part("RBraceToken", cons(identifierDeclaration("ln", nil), cons(identifierDeclaration("col", nil), one(identifierDeclaration("idx", nil)))))), nil, nil, one(objCons(cons(defDec("nature", nil, one("public"), strLit("RBRACE")), cons(defDec("line", nil, one("public"), lexReq(one(part("ln", nil)))), cons(defDec("column", nil, one("public"), lexReq(one(part("col", nil)))), cons(defDec("index", nil, one("public"), lexReq(one(part("idx", nil)))), cons(methDec(one(part("asString", nil)), nil, nil, one(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(strLit("RBRACE["), one(part("++", one(lexReq(one(part("line", nil))))))), one(part("++", one(strLit(":"))))), one(part("++", one(lexReq(one(part("column", nil))))))), one(part("++", one(strLit(safeStr("", charAt, "")))))), one(part("++", one(lexReq(one(part("index", nil))))))), one(part("++", one(strLit("]"))))))), one(methDec(one(part("location", nil)), nil, nil, one(dotReq(dotReq(dotReq(lexReq(one(part("modulePrefix", nil))), one(part("++", one(lexReq(one(part("line", nil))))))), one(part("++", one(strLit(":"))))), one(part("++", one(lexReq(one(part("column", nil))))))))))))))), nil))), cons(methDec(one(part("CommaToken", cons(identifierDeclaration("line", nil), one(identifierDeclaration("column", nil))))), nil, nil, one(lexReq(one(part("SymbolToken", cons(lexReq(one(part("line", nil))), cons(lexReq(one(part("column", nil))), one(strLit("COMMA"))))))))), cons(methDec(one(part("DotToken", cons(identifierDeclaration("line", nil), one(identifierDeclaration("column", nil))))), nil, nil, one(lexReq(one(part("SymbolToken", cons(lexReq(one(part("line", nil))), cons(lexReq(one(part("column", nil))), one(strLit("DOT"))))))))), cons(methDec(one(part("IdentifierToken", cons(identifierDeclaration("ln", nil), cons(identifierDeclaration("col", nil), one(identifierDeclaration("val", nil)))))), nil, nil, one(objCons(cons(defDec("nature", nil, one("public"), strLit("IDENTIFIER")), cons(defDec("value", nil, one("public"), lexReq(one(part("val", nil)))), cons(defDec("line", nil, one("public"), lexReq(one(part("ln", nil)))), cons(defDec("column", nil, one("public"), lexReq(one(part("col", nil)))), cons(methDec(one(part("asString", nil)), nil, nil, one(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(lexReq(one(part("nature", nil))), one(part("++", one(strLit("("))))), one(part("++", one(lexReq(one(part("value", nil))))))), one(part("++", one(strLit(")["))))), one(part("++", one(lexReq(one(part("line", nil))))))), one(part("++", one(strLit(":"))))), one(part("++", one(lexReq(one(part("column", nil))))))), one(part("++", one(strLit("]"))))))), one(methDec(one(part("location", nil)), nil, nil, one(dotReq(dotReq(dotReq(lexReq(one(part("modulePrefix", nil))), one(part("++", one(lexReq(one(part("line", nil))))))), one(part("++", one(strLit(":"))))), one(part("++", one(lexReq(one(part("column", nil))))))))))))))), nil))), cons(methDec(one(part("KeywordToken", cons(identifierDeclaration("ln", nil), cons(identifierDeclaration("col", nil), one(identifierDeclaration("val", nil)))))), nil, nil, one(objCons(cons(defDec("nature", nil, one("public"), strLit("KEYWORD")), cons(defDec("value", nil, one("public"), lexReq(one(part("val", nil)))), cons(defDec("line", nil, one("public"), lexReq(one(part("ln", nil)))), cons(defDec("column", nil, one("public"), lexReq(one(part("col", nil)))), cons(methDec(one(part("asString", nil)), nil, nil, one(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(lexReq(one(part("nature", nil))), one(part("++", one(strLit("("))))), one(part("++", one(lexReq(one(part("value", nil))))))), one(part("++", one(strLit(")"))))), one(part("++", one(strLit("["))))), one(part("++", one(lexReq(one(part("line", nil))))))), one(part("++", one(strLit(":"))))), one(part("++", one(lexReq(one(part("column", nil))))))), one(part("++", one(strLit("]"))))))), one(methDec(one(part("location", nil)), nil, nil, one(dotReq(dotReq(dotReq(lexReq(one(part("modulePrefix", nil))), one(part("++", one(lexReq(one(part("line", nil))))))), one(part("++", one(strLit(":"))))), one(part("++", one(lexReq(one(part("column", nil))))))))))))))), nil))), cons(methDec(one(part("OperatorToken", cons(identifierDeclaration("ln", nil), cons(identifierDeclaration("col", nil), one(identifierDeclaration("val", nil)))))), nil, nil, one(objCons(cons(defDec("nature", nil, one("public"), strLit("OPERATOR")), cons(defDec("value", nil, one("public"), lexReq(one(part("val", nil)))), cons(defDec("line", nil, one("public"), lexReq(one(part("ln", nil)))), cons(defDec("column", nil, one("public"), lexReq(one(part("col", nil)))), cons(methDec(one(part("asString", nil)), nil, nil, one(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(lexReq(one(part("nature", nil))), one(part("++", one(strLit("("))))), one(part("++", one(lexReq(one(part("value", nil))))))), one(part("++", one(strLit(")"))))), one(part("++", one(strLit("["))))), one(part("++", one(lexReq(one(part("line", nil))))))), one(part("++", one(strLit(":"))))), one(part("++", one(lexReq(one(part("column", nil))))))), one(part("++", one(strLit("]"))))))), one(methDec(one(part("location", nil)), nil, nil, one(dotReq(dotReq(dotReq(lexReq(one(part("modulePrefix", nil))), one(part("++", one(lexReq(one(part("line", nil))))))), one(part("++", one(strLit(":"))))), one(part("++", one(lexReq(one(part("column", nil))))))))))))))), nil))), cons(methDec(one(part("StringToken", cons(identifierDeclaration("ln", nil), cons(identifierDeclaration("col", nil), one(identifierDeclaration("val", nil)))))), nil, nil, one(objCons(cons(defDec("nature", nil, one("public"), strLit("STRING")), cons(defDec("value", nil, one("public"), lexReq(one(part("val", nil)))), cons(defDec("line", nil, one("public"), lexReq(one(part("ln", nil)))), cons(defDec("column", nil, one("public"), lexReq(one(part("col", nil)))), cons(methDec(one(part("asString", nil)), nil, nil, one(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(lexReq(one(part("nature", nil))), one(part("++", one(strLit("("))))), one(part("++", one(lexReq(one(part("value", nil))))))), one(part("++", one(strLit(")"))))), one(part("++", one(strLit("["))))), one(part("++", one(lexReq(one(part("line", nil))))))), one(part("++", one(strLit(":"))))), one(part("++", one(lexReq(one(part("column", nil))))))), one(part("++", one(strLit("]"))))))), one(methDec(one(part("location", nil)), nil, nil, one(dotReq(dotReq(dotReq(lexReq(one(part("modulePrefix", nil))), one(part("++", one(lexReq(one(part("line", nil))))))), one(part("++", one(strLit(":"))))), one(part("++", one(lexReq(one(part("column", nil))))))))))))))), nil))), cons(methDec(one(part("InterpStringToken", cons(identifierDeclaration("ln", nil), cons(identifierDeclaration("col", nil), one(identifierDeclaration("val", nil)))))), nil, nil, one(objCons(cons(defDec("nature", nil, one("public"), strLit("INTERPSTRING")), cons(defDec("value", nil, one("public"), lexReq(one(part("val", nil)))), cons(defDec("line", nil, one("public"), lexReq(one(part("ln", nil)))), cons(defDec("column", nil, one("public"), lexReq(one(part("col", nil)))), cons(methDec(one(part("asString", nil)), nil, nil, one(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(lexReq(one(part("nature", nil))), one(part("++", one(strLit("("))))), one(part("++", one(lexReq(one(part("value", nil))))))), one(part("++", one(strLit(")"))))), one(part("++", one(strLit("["))))), one(part("++", one(lexReq(one(part("line", nil))))))), one(part("++", one(strLit(":"))))), one(part("++", one(lexReq(one(part("column", nil))))))), one(part("++", one(strLit("]"))))))), one(methDec(one(part("location", nil)), nil, nil, one(dotReq(dotReq(dotReq(lexReq(one(part("modulePrefix", nil))), one(part("++", one(lexReq(one(part("line", nil))))))), one(part("++", one(strLit(":"))))), one(part("++", one(lexReq(one(part("column", nil))))))))))))))), nil))), cons(methDec(one(part("EqualsToken", cons(identifierDeclaration("line", nil), one(identifierDeclaration("column", nil))))), nil, nil, one(lexReq(one(part("SymbolToken", cons(lexReq(one(part("line", nil))), cons(lexReq(one(part("column", nil))), one(strLit("EQUALS"))))))))), cons(methDec(one(part("AssignToken", cons(identifierDeclaration("line", nil), one(identifierDeclaration("column", nil))))), nil, nil, one(lexReq(one(part("SymbolToken", cons(lexReq(one(part("line", nil))), cons(lexReq(one(part("column", nil))), one(strLit("ASSIGN"))))))))), cons(methDec(one(part("ArrowToken", cons(identifierDeclaration("line", nil), one(identifierDeclaration("column", nil))))), nil, nil, one(lexReq(one(part("SymbolToken", cons(lexReq(one(part("line", nil))), cons(lexReq(one(part("column", nil))), one(strLit("ARROW"))))))))), cons(methDec(one(part("SymbolToken", cons(identifierDeclaration("ln", nil), cons(identifierDeclaration("col", nil), one(identifierDeclaration("nat", nil)))))), nil, nil, one(objCons(cons(defDec("nature", nil, one("public"), lexReq(one(part("nat", nil)))), cons(defDec("line", nil, one("public"), lexReq(one(part("ln", nil)))), cons(defDec("column", nil, one("public"), lexReq(one(part("col", nil)))), cons(methDec(one(part("asString", nil)), nil, nil, one(dotReq(dotReq(dotReq(dotReq(dotReq(lexReq(one(part("nature", nil))), one(part("++", one(strLit("["))))), one(part("++", one(lexReq(one(part("line", nil))))))), one(part("++", one(strLit(":"))))), one(part("++", one(lexReq(one(part("column", nil))))))), one(part("++", one(strLit("]"))))))), one(methDec(one(part("location", nil)), nil, nil, one(dotReq(dotReq(dotReq(lexReq(one(part("modulePrefix", nil))), one(part("++", one(lexReq(one(part("line", nil))))))), one(part("++", one(strLit(":"))))), one(part("++", one(lexReq(one(part("column", nil)))))))))))))), nil))), cons(methDec(one(part("NewlineToken", cons(identifierDeclaration("line", nil), one(identifierDeclaration("column", nil))))), nil, nil, one(lexReq(one(part("SymbolToken", cons(lexReq(one(part("line", nil))), cons(lexReq(one(part("column", nil))), one(strLit("NEWLINE"))))))))), cons(methDec(one(part("CommentToken", cons(identifierDeclaration("ln", nil), cons(identifierDeclaration("col", nil), one(identifierDeclaration("text", nil)))))), nil, nil, one(objCons(cons(defDec("nature", nil, one("public"), strLit("COMMENT")), cons(defDec("line", nil, one("public"), lexReq(one(part("ln", nil)))), cons(defDec("column", nil, one("public"), lexReq(one(part("col", nil)))), cons(defDec("value", nil, one("public"), lexReq(one(part("text", nil)))), cons(methDec(one(part("asString", nil)), nil, nil, one(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(lexReq(one(part("nature", nil))), one(part("++", one(strLit("("))))), one(part("++", one(lexReq(one(part("value", nil))))))), one(part("++", one(strLit(")["))))), one(part("++", one(lexReq(one(part("line", nil))))))), one(part("++", one(strLit(":"))))), one(part("++", one(lexReq(one(part("column", nil))))))), one(part("++", one(strLit("]"))))))), one(methDec(one(part("location", nil)), nil, nil, one(dotReq(dotReq(dotReq(lexReq(one(part("modulePrefix", nil))), one(part("++", one(lexReq(one(part("line", nil))))))), one(part("++", one(strLit(":"))))), one(part("++", one(lexReq(one(part("column", nil))))))))))))))), nil))), cons(methDec(one(part("isOperatorCharacter", one(identifierDeclaration("c", nil)))), nil, nil, one(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(lexReq(one(part("c", nil))), one(part("==", one(strLit("+"))))), one(part("||", one(dotReq(lexReq(one(part("c", nil))), one(part("==", one(strLit("-"))))))))), one(part("||", one(dotReq(lexReq(one(part("c", nil))), one(part("==", one(strLit(safeStr("", charStar, "")))))))))), one(part("||", one(dotReq(lexReq(one(part("c", nil))), one(part("==", one(strLit("/"))))))))), one(part("||", one(dotReq(lexReq(one(part("c", nil))), one(part("==", one(strLit("="))))))))), one(part("||", one(dotReq(lexReq(one(part("c", nil))), one(part("==", one(strLit(":"))))))))), one(part("||", one(dotReq(lexReq(one(part("c", nil))), one(part("==", one(strLit("|"))))))))), one(part("||", one(dotReq(lexReq(one(part("c", nil))), one(part("==", one(strLit(safeStr("", charAmp, "")))))))))), one(part("||", one(dotReq(lexReq(one(part("c", nil))), one(part("==", one(strLit(safeStr("", charExclam, "")))))))))), one(part("||", one(dotReq(lexReq(one(part("c", nil))), one(part("==", one(strLit(">"))))))))), one(part("||", one(dotReq(lexReq(one(part("c", nil))), one(part("==", one(strLit("<"))))))))), one(part("||", one(dotReq(lexReq(one(part("c", nil))), one(part("==", one(strLit("."))))))))))), cons(methDec(one(part("isIdentifierStart", one(identifierDeclaration("c", nil)))), nil, nil, cons(defDec("cp", nil, nil, dotReq(lexReq(one(part("c", nil))), one(part("firstCodepoint", nil)))), one(dotReq(dotReq(dotReq(dotReq(lexReq(one(part("cp", nil))), one(part(">=", one(numLit(97))))), one(part("&&", one(dotReq(lexReq(one(part("cp", nil))), one(part("<=", one(numLit(122))))))))), one(part("||", one(dotReq(dotReq(lexReq(one(part("cp", nil))), one(part(">=", one(numLit(65))))), one(part("&&", one(dotReq(lexReq(one(part("cp", nil))), one(part("<=", one(numLit(90))))))))))))), one(part("||", one(dotReq(lexReq(one(part("cp", nil))), one(part("==", one(numLit(95)))))))))))), cons(methDec(one(part("isDigit", one(identifierDeclaration("c", nil)))), nil, nil, cons(defDec("cp", nil, nil, dotReq(lexReq(one(part("c", nil))), one(part("firstCodepoint", nil)))), one(dotReq(dotReq(lexReq(one(part("cp", nil))), one(part(">=", one(numLit(48))))), one(part("&&", one(dotReq(lexReq(one(part("cp", nil))), one(part("<=", one(numLit(57)))))))))))), cons(methDec(one(part("ErrorToken", cons(identifierDeclaration("ln", nil), cons(identifierDeclaration("col", nil), one(identifierDeclaration("val", nil)))))), nil, nil, one(objCons(cons(defDec("nature", nil, one("public"), strLit("ERROR")), cons(defDec("message", nil, one("public"), lexReq(one(part("val", nil)))), cons(defDec("line", nil, one("public"), lexReq(one(part("ln", nil)))), cons(defDec("column", nil, one("public"), lexReq(one(part("col", nil)))), one(methDec(one(part("asString", nil)), nil, nil, one(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(lexReq(one(part("nature", nil))), one(part("++", one(strLit("("))))), one(part("++", one(lexReq(one(part("message", nil))))))), one(part("++", one(strLit(")["))))), one(part("++", one(lexReq(one(part("line", nil))))))), one(part("++", one(strLit(":"))))), one(part("++", one(lexReq(one(part("column", nil))))))), one(part("++", one(strLit("]")))))))))))), nil))), cons(varDec("indentColumn", nil, nil, one(numLit(0))), cons(methDec(one(part("lexer", one(identifierDeclaration("code", nil)))), nil, nil, one(objCons(cons(defDec("source", nil, nil, lexReq(one(part("code", nil)))), cons(varDec("index", nil, nil, one(numLit(1))), cons(varDec("line", nil, nil, one(numLit(1))), cons(varDec("column", nil, nil, one(numLit(0))), cons(varDec("lineStart", nil, nil, one(numLit(0))), cons(varDec("currentToken", nil, nil, one(lexReq(one(part("nextToken", nil))))), cons(methDec(one(part("nextToken", nil)), nil, nil, cons(lexReq(cons(part("if", one(dotReq(lexReq(one(part("index", nil))), one(part(">", one(dotReq(lexReq(one(part("source", nil))), one(part("size", nil))))))))), one(part("then", one(block(nil, one(returnStmt(lexReq(one(part("EOFToken", cons(lexReq(one(part("line", nil))), one(lexReq(one(part("column", nil)))))))))))))))), cons(varDec("c", nil, nil, one(dotReq(lexReq(one(part("source", nil))), one(part("at", one(lexReq(one(part("index", nil))))))))), cons(assn(lexReq(one(part("column", nil))), dotReq(lexReq(one(part("index", nil))), one(part("-", one(lexReq(one(part("lineStart", nil)))))))), cons(assn(lexReq(one(part("index", nil))), dotReq(lexReq(one(part("index", nil))), one(part("+", one(numLit(1)))))), cons(lexReq(cons(part("if", one(dotReq(lexReq(one(part("c", nil))), one(part("==", one(strLit(" "))))))), one(part("then", one(block(nil, one(returnStmt(lexReq(one(part("nextToken", nil))))))))))), cons(lexReq(cons(part("if", one(dotReq(lexReq(one(part("c", nil))), one(part("==", one(strLit("("))))))), one(part("then", one(block(nil, one(returnStmt(lexReq(one(part("LParenToken", cons(lexReq(one(part("line", nil))), one(lexReq(one(part("column", nil)))))))))))))))), cons(lexReq(cons(part("if", one(dotReq(lexReq(one(part("c", nil))), one(part("==", one(strLit(")"))))))), one(part("then", one(block(nil, one(returnStmt(lexReq(one(part("RParenToken", cons(lexReq(one(part("line", nil))), one(lexReq(one(part("column", nil)))))))))))))))), cons(lexReq(cons(part("if", one(dotReq(dotReq(lexReq(one(part("c", nil))), one(part(">", one(strLit("z"))))), one(part("&&", one(dotReq(lexReq(one(part("c", nil))), one(part("<", one(strLit("|"))))))))))), one(part("then", one(block(nil, one(returnStmt(lexReq(one(part("LBraceToken", cons(lexReq(one(part("line", nil))), one(lexReq(one(part("column", nil)))))))))))))))), cons(lexReq(cons(part("if", one(dotReq(lexReq(one(part("c", nil))), one(part("==", one(strLit("}"))))))), one(part("then", one(block(nil, one(returnStmt(lexReq(one(part("RBraceToken", cons(lexReq(one(part("line", nil))), cons(lexReq(one(part("column", nil))), one(lexReq(one(part("index", nil))))))))))))))))), cons(lexReq(cons(part("if", one(dotReq(lexReq(one(part("c", nil))), one(part("==", one(strLit(","))))))), one(part("then", one(block(nil, one(returnStmt(lexReq(one(part("CommaToken", cons(lexReq(one(part("line", nil))), one(lexReq(one(part("column", nil)))))))))))))))), cons(lexReq(cons(part("if", one(dotReq(dotReq(lexReq(one(part("c", nil))), one(part("firstCodepoint", nil))), one(part("==", one(numLit(13))))))), one(part("then", one(block(nil, cons(assn(lexReq(one(part("c", nil))), dotReq(lexReq(one(part("source", nil))), one(part("at", one(lexReq(one(part("index", nil)))))))), one(assn(lexReq(one(part("index", nil))), dotReq(lexReq(one(part("index", nil))), one(part("+", one(numLit(1)))))))))))))), cons(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("c", nil))), one(part("firstCodepoint", nil))), one(part("==", one(numLit(10))))), one(part("||", one(dotReq(dotReq(lexReq(one(part("c", nil))), one(part("firstCodepoint", nil))), one(part("==", one(numLit(8232))))))))))), one(part("then", one(block(nil, cons(assn(lexReq(one(part("line", nil))), dotReq(lexReq(one(part("line", nil))), one(part("+", one(numLit(1)))))), cons(assn(lexReq(one(part("lineStart", nil))), dotReq(lexReq(one(part("index", nil))), one(part("-", one(numLit(1)))))), one(returnStmt(lexReq(one(part("NewlineToken", cons(lexReq(one(part("line", nil))), one(lexReq(one(part("column", nil)))))))))))))))))), cons(lexReq(cons(part("if", one(dotReq(dotReq(lexReq(one(part("c", nil))), one(part("firstCodepoint", nil))), one(part("==", one(numLit(34))))))), one(part("then", one(block(nil, one(returnStmt(lexReq(one(part("lexString", nil))))))))))), cons(lexReq(cons(part("if", one(lexReq(one(part("isDigit", one(lexReq(one(part("c", nil))))))))), one(part("then", one(block(nil, cons(defDec("startIndex", nil, nil, dotReq(lexReq(one(part("index", nil))), one(part("-", one(numLit(1)))))), cons(lexReq(cons(part("if", one(dotReq(lexReq(one(part("index", nil))), one(part(">=", one(dotReq(lexReq(one(part("source", nil))), one(part("size", nil))))))))), one(part("then", one(block(nil, one(returnStmt(lexReq(one(part("NumberToken", cons(lexReq(one(part("line", nil))), cons(lexReq(one(part("column", nil))), one(lexReq(one(part("c", nil))))))))))))))))), cons(varDec("value", nil, nil, one(strLit(""))), cons(lexReq(cons(part("while", one(block(nil, one(dotReq(lexReq(one(part("isDigit", one(lexReq(one(part("c", nil))))))), one(part("&&", one(dotReq(lexReq(one(part("index", nil))), one(part("<=", one(dotReq(lexReq(one(part("source", nil))), one(part("size", nil))))))))))))))), one(part("do", one(block(nil, cons(assn(lexReq(one(part("value", nil))), dotReq(lexReq(one(part("value", nil))), one(part("++", one(lexReq(one(part("c", nil)))))))), cons(assn(lexReq(one(part("c", nil))), dotReq(lexReq(one(part("source", nil))), one(part("at", one(lexReq(one(part("index", nil)))))))), one(assn(lexReq(one(part("index", nil))), dotReq(lexReq(one(part("index", nil))), one(part("+", one(numLit(1))))))))))))))), cons(lexReq(cons(part("if", one(dotReq(lexReq(one(part("c", nil))), one(part("==", one(strLit("."))))))), one(part("then", one(block(nil, cons(assn(lexReq(one(part("value", nil))), dotReq(lexReq(one(part("value", nil))), one(part("++", one(lexReq(one(part("c", nil)))))))), cons(assn(lexReq(one(part("c", nil))), dotReq(lexReq(one(part("source", nil))), one(part("at", one(lexReq(one(part("index", nil)))))))), cons(assn(lexReq(one(part("index", nil))), dotReq(lexReq(one(part("index", nil))), one(part("+", one(numLit(1)))))), one(lexReq(cons(part("while", one(block(nil, one(dotReq(lexReq(one(part("isDigit", one(lexReq(one(part("c", nil))))))), one(part("&&", one(dotReq(lexReq(one(part("index", nil))), one(part("<=", one(dotReq(lexReq(one(part("source", nil))), one(part("size", nil))))))))))))))), one(part("do", one(block(nil, cons(assn(lexReq(one(part("value", nil))), dotReq(lexReq(one(part("value", nil))), one(part("++", one(lexReq(one(part("c", nil)))))))), cons(assn(lexReq(one(part("c", nil))), dotReq(lexReq(one(part("source", nil))), one(part("at", one(lexReq(one(part("index", nil)))))))), one(assn(lexReq(one(part("index", nil))), dotReq(lexReq(one(part("index", nil))), one(part("+", one(numLit(1))))))))))))))))))))))))), cons(lexReq(cons(part("if", one(dotReq(lexReq(one(part("index", nil))), one(part(">", one(dotReq(lexReq(one(part("startIndex", nil))), one(part("+", one(numLit(1))))))))))), one(part("then", one(block(nil, one(assn(lexReq(one(part("index", nil))), dotReq(lexReq(one(part("index", nil))), one(part("-", one(numLit(1))))))))))))), one(returnStmt(lexReq(one(part("NumberToken", cons(lexReq(one(part("line", nil))), cons(lexReq(one(part("column", nil))), one(lexReq(one(part("value", nil))))))))))))))))))))))), cons(lexReq(cons(part("if", one(lexReq(one(part("isIdentifierStart", one(lexReq(one(part("c", nil))))))))), one(part("then", one(block(nil, cons(defDec("startIndex", nil, nil, dotReq(lexReq(one(part("index", nil))), one(part("-", one(numLit(1)))))), cons(varDec("value", nil, nil, one(lexReq(one(part("c", nil))))), cons(lexReq(cons(part("if", one(dotReq(lexReq(one(part("index", nil))), one(part(">", one(dotReq(lexReq(one(part("source", nil))), one(part("size", nil))))))))), one(part("then", one(block(nil, one(returnStmt(lexReq(one(part("IdentifierToken", cons(lexReq(one(part("line", nil))), cons(lexReq(one(part("column", nil))), one(lexReq(one(part("value", nil))))))))))))))))), cons(assn(lexReq(one(part("c", nil))), dotReq(lexReq(one(part("source", nil))), one(part("at", one(lexReq(one(part("index", nil)))))))), cons(lexReq(cons(part("while", one(block(nil, one(dotReq(dotReq(dotReq(lexReq(one(part("isIdentifierStart", one(lexReq(one(part("c", nil))))))), one(part("||", one(lexReq(one(part("isDigit", one(lexReq(one(part("c", nil))))))))))), one(part("||", one(dotReq(lexReq(one(part("c", nil))), one(part("==", one(strLit("'"))))))))), one(part("&&", one(dotReq(lexReq(one(part("index", nil))), one(part("<=", one(dotReq(lexReq(one(part("source", nil))), one(part("size", nil))))))))))))))), one(part("do", one(block(nil, cons(assn(lexReq(one(part("value", nil))), dotReq(lexReq(one(part("value", nil))), one(part("++", one(lexReq(one(part("c", nil)))))))), cons(assn(lexReq(one(part("index", nil))), dotReq(lexReq(one(part("index", nil))), one(part("+", one(numLit(1)))))), one(lexReq(cons(part("if", one(dotReq(lexReq(one(part("index", nil))), one(part("<=", one(dotReq(lexReq(one(part("source", nil))), one(part("size", nil))))))))), one(part("then", one(block(nil, one(assn(lexReq(one(part("c", nil))), dotReq(lexReq(one(part("source", nil))), one(part("at", one(lexReq(one(part("index", nil)))))))))))))))))))))))), cons(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(lexReq(one(part("value", nil))), one(part("==", one(strLit("var"))))), one(part("||", one(dotReq(lexReq(one(part("value", nil))), one(part("==", one(strLit("def"))))))))), one(part("||", one(dotReq(lexReq(one(part("value", nil))), one(part("==", one(strLit("method"))))))))), one(part("||", one(dotReq(lexReq(one(part("value", nil))), one(part("==", one(strLit("object"))))))))), one(part("||", one(dotReq(lexReq(one(part("value", nil))), one(part("==", one(strLit("is"))))))))), one(part("||", one(dotReq(lexReq(one(part("value", nil))), one(part("==", one(strLit("return"))))))))), one(part("||", one(dotReq(lexReq(one(part("value", nil))), one(part("==", one(strLit("class"))))))))), one(part("||", one(dotReq(lexReq(one(part("value", nil))), one(part("==", one(strLit("type"))))))))), one(part("||", one(dotReq(lexReq(one(part("value", nil))), one(part("==", one(strLit("import"))))))))), one(part("||", one(dotReq(lexReq(one(part("value", nil))), one(part("==", one(strLit("self"))))))))))), one(part("then", one(block(nil, one(returnStmt(lexReq(one(part("KeywordToken", cons(lexReq(one(part("line", nil))), cons(lexReq(one(part("column", nil))), one(lexReq(one(part("value", nil))))))))))))))))), one(returnStmt(lexReq(one(part("IdentifierToken", cons(lexReq(one(part("line", nil))), cons(lexReq(one(part("column", nil))), one(lexReq(one(part("value", nil))))))))))))))))))))))), cons(lexReq(cons(part("if", one(lexReq(one(part("isOperatorCharacter", one(lexReq(one(part("c", nil))))))))), one(part("then", one(block(nil, cons(defDec("startIndex", nil, nil, lexReq(one(part("index", nil)))), cons(varDec("op", nil, nil, one(lexReq(one(part("c", nil))))), cons(assn(lexReq(one(part("c", nil))), dotReq(lexReq(one(part("source", nil))), one(part("at", one(lexReq(one(part("index", nil)))))))), cons(assn(lexReq(one(part("index", nil))), dotReq(lexReq(one(part("index", nil))), one(part("+", one(numLit(1)))))), cons(lexReq(cons(part("while", one(block(nil, one(dotReq(lexReq(one(part("isOperatorCharacter", one(lexReq(one(part("c", nil))))))), one(part("&&", one(dotReq(lexReq(one(part("index", nil))), one(part("<=", one(dotReq(lexReq(one(part("source", nil))), one(part("size", nil))))))))))))))), one(part("do", one(block(nil, cons(assn(lexReq(one(part("op", nil))), dotReq(lexReq(one(part("op", nil))), one(part("++", one(lexReq(one(part("c", nil)))))))), cons(assn(lexReq(one(part("c", nil))), dotReq(lexReq(one(part("source", nil))), one(part("at", one(lexReq(one(part("index", nil)))))))), one(assn(lexReq(one(part("index", nil))), dotReq(lexReq(one(part("index", nil))), one(part("+", one(numLit(1))))))))))))))), cons(assn(lexReq(one(part("index", nil))), dotReq(lexReq(one(part("index", nil))), one(part("-", one(numLit(1)))))), cons(lexReq(cons(part("if", one(dotReq(lexReq(one(part("op", nil))), one(part("==", one(strLit(":="))))))), one(part("then", one(block(nil, one(returnStmt(lexReq(one(part("AssignToken", cons(lexReq(one(part("line", nil))), one(lexReq(one(part("column", nil)))))))))))))))), cons(lexReq(cons(part("if", one(dotReq(lexReq(one(part("op", nil))), one(part("==", one(strLit("="))))))), one(part("then", one(block(nil, one(returnStmt(lexReq(one(part("EqualsToken", cons(lexReq(one(part("line", nil))), one(lexReq(one(part("column", nil)))))))))))))))), cons(lexReq(cons(part("if", one(dotReq(lexReq(one(part("op", nil))), one(part("==", one(strLit("->"))))))), one(part("then", one(block(nil, one(returnStmt(lexReq(one(part("ArrowToken", cons(lexReq(one(part("line", nil))), one(lexReq(one(part("column", nil)))))))))))))))), cons(lexReq(cons(part("if", one(dotReq(lexReq(one(part("op", nil))), one(part("==", one(strLit("."))))))), one(part("then", one(block(nil, one(returnStmt(lexReq(one(part("DotToken", cons(lexReq(one(part("line", nil))), one(lexReq(one(part("column", nil)))))))))))))))), cons(lexReq(cons(part("if", one(dotReq(lexReq(one(part("op", nil))), one(part("==", one(strLit(":"))))))), one(part("then", one(block(nil, one(returnStmt(lexReq(one(part("SymbolToken", cons(lexReq(one(part("line", nil))), cons(lexReq(one(part("column", nil))), one(strLit("COLON"))))))))))))))), cons(lexReq(cons(part("if", one(dotReq(lexReq(one(part("op", nil))), one(part("==", one(strLit("//"))))))), one(part("then", one(block(nil, cons(varDec("cp", nil, nil, one(dotReq(lexReq(one(part("c", nil))), one(part("firstCodepoint", nil))))), cons(varDec("text", nil, nil, one(strLit(""))), cons(assn(lexReq(one(part("index", nil))), dotReq(lexReq(one(part("index", nil))), one(part("+", one(numLit(1)))))), cons(lexReq(cons(part("while", one(block(nil, one(dotReq(dotReq(dotReq(lexReq(one(part("cp", nil))), one(part("!=", one(numLit(10))))), one(part("&&", one(dotReq(lexReq(one(part("cp", nil))), one(part("!=", one(numLit(13))))))))), one(part("&&", one(dotReq(lexReq(one(part("index", nil))), one(part("<=", one(dotReq(lexReq(one(part("source", nil))), one(part("size", nil))))))))))))))), one(part("do", one(block(nil, cons(assn(lexReq(one(part("text", nil))), dotReq(lexReq(one(part("text", nil))), one(part("++", one(lexReq(one(part("c", nil)))))))), cons(assn(lexReq(one(part("c", nil))), dotReq(lexReq(one(part("source", nil))), one(part("at", one(lexReq(one(part("index", nil)))))))), cons(assn(lexReq(one(part("cp", nil))), dotReq(lexReq(one(part("c", nil))), one(part("firstCodepoint", nil)))), one(assn(lexReq(one(part("index", nil))), dotReq(lexReq(one(part("index", nil))), one(part("+", one(numLit(1)))))))))))))))), cons(assn(lexReq(one(part("index", nil))), dotReq(lexReq(one(part("index", nil))), one(part("-", one(numLit(1)))))), one(returnStmt(lexReq(one(part("CommentToken", cons(lexReq(one(part("line", nil))), cons(lexReq(one(part("column", nil))), one(lexReq(one(part("text", nil)))))))))))))))))))))), one(returnStmt(lexReq(one(part("OperatorToken", cons(lexReq(one(part("line", nil))), cons(lexReq(one(part("column", nil))), one(lexReq(one(part("op", nil))))))))))))))))))))))))))))), cons(lexReq(cons(part("if", one(dotReq(lexReq(one(part("c", nil))), one(part("==", one(strLit(";"))))))), one(part("then", one(block(nil, one(returnStmt(lexReq(one(part("SymbolToken", cons(lexReq(one(part("line", nil))), cons(lexReq(one(part("column", nil))), one(strLit("SEMICOLON"))))))))))))))), one(lexReq(one(part("parseError", cons(lexReq(one(part("line", nil))), cons(lexReq(one(part("column", nil))), one(dotReq(dotReq(dotReq(dotReq(strLit("Unknown character: "), one(part("++", one(dotReq(lexReq(one(part("c", nil))), one(part("asString", nil))))))), one(part("++", one(strLit(" ("))))), one(part("++", one(dotReq(dotReq(lexReq(one(part("c", nil))), one(part("firstCodepoint", nil))), one(part("asString", nil))))))), one(part("++", one(strLit(")")))))))))))))))))))))))))))))), cons(methDec(one(part("current", nil)), nil, nil, one(lexReq(one(part("currentToken", nil))))), cons(methDec(one(part("advance", nil)), nil, nil, cons(assn(lexReq(one(part("currentToken", nil))), lexReq(one(part("nextToken", nil)))), one(lexReq(cons(part("if", one(dotReq(dotReq(lexReq(one(part("currentToken", nil))), one(part("nature", nil))), one(part("==", one(strLit("NEWLINE"))))))), one(part("then", one(block(nil, cons(defDec("pendingToken", nil, nil, lexReq(one(part("peek", nil)))), one(lexReq(cons(part("if", one(dotReq(dotReq(lexReq(one(part("pendingToken", nil))), one(part("column", nil))), one(part(">", one(lexReq(one(part("indentColumn", nil))))))))), one(part("then", one(block(nil, one(lexReq(one(part("advance", nil))))))))))))))))))))), cons(methDec(one(part("peek", nil)), nil, nil, cons(defDec("oldIndex", nil, nil, lexReq(one(part("index", nil)))), cons(defDec("oldLine", nil, nil, lexReq(one(part("line", nil)))), cons(defDec("oldLineStart", nil, nil, lexReq(one(part("lineStart", nil)))), cons(defDec("oldColumn", nil, nil, lexReq(one(part("column", nil)))), cons(defDec("oldCurrentToken", nil, nil, lexReq(one(part("currentToken", nil)))), cons(lexReq(one(part("advance", nil))), cons(defDec("pending", nil, nil, lexReq(one(part("currentToken", nil)))), cons(assn(lexReq(one(part("index", nil))), lexReq(one(part("oldIndex", nil)))), cons(assn(lexReq(one(part("line", nil))), lexReq(one(part("oldLine", nil)))), cons(assn(lexReq(one(part("lineStart", nil))), lexReq(one(part("oldLineStart", nil)))), cons(assn(lexReq(one(part("column", nil))), lexReq(one(part("oldColumn", nil)))), cons(assn(lexReq(one(part("currentToken", nil))), lexReq(one(part("oldCurrentToken", nil)))), one(returnStmt(lexReq(one(part("pending", nil)))))))))))))))))), cons(methDec(one(part("lexString", nil)), nil, nil, cons(varDec("value", nil, nil, one(strLit(""))), cons(varDec("escaped", nil, nil, one(lexReq(one(part("false", nil))))), cons(lexReq(cons(part("while", one(block(nil, one(dotReq(dotReq(dotReq(dotReq(lexReq(one(part("source", nil))), one(part("at", one(lexReq(one(part("index", nil))))))), one(part("firstCodepoint", nil))), one(part("!=", one(numLit(34))))), one(part("||", one(lexReq(one(part("escaped", nil))))))))))), one(part("do", one(block(nil, cons(varDec("escapeNext", nil, nil, one(lexReq(one(part("false", nil))))), cons(defDec("cp", nil, nil, dotReq(dotReq(lexReq(one(part("source", nil))), one(part("at", one(lexReq(one(part("index", nil))))))), one(part("firstCodepoint", nil)))), cons(lexReq(cons(part("if", one(dotReq(dotReq(lexReq(one(part("cp", nil))), one(part("==", one(numLit(92))))), one(part("&&", one(dotReq(lexReq(one(part("escaped", nil))), one(part("==", one(lexReq(one(part("false", nil))))))))))))), cons(part("then", one(block(nil, one(assn(lexReq(one(part("escapeNext", nil))), lexReq(one(part("true", nil)))))))), cons(part("elseif", one(block(nil, one(dotReq(lexReq(one(part("escaped", nil))), one(part("&&", one(dotReq(lexReq(one(part("cp", nil))), one(part("==", one(numLit(110))))))))))))), cons(part("then", one(block(nil, one(assn(lexReq(one(part("value", nil))), dotReq(lexReq(one(part("value", nil))), one(part("++", one(strLit(safeStr("", charLF, ""))))))))))), cons(part("elseif", one(block(nil, one(dotReq(lexReq(one(part("escaped", nil))), one(part("&&", one(dotReq(lexReq(one(part("cp", nil))), one(part("==", one(numLit(114))))))))))))), cons(part("then", one(block(nil, one(assn(lexReq(one(part("value", nil))), dotReq(lexReq(one(part("value", nil))), one(part("++", one(strLit(safeStr("", charCR, ""))))))))))), one(part("else", one(block(nil, one(lexReq(cons(part("if", one(dotReq(dotReq(lexReq(one(part("cp", nil))), one(part("==", one(numLit(123))))), one(part("&&", one(dotReq(lexReq(one(part("escaped", nil))), one(part("prefix!", nil))))))))), cons(part("then", one(block(nil, cons(comment(" String interpolation"), cons(assn(lexReq(one(part("index", nil))), dotReq(lexReq(one(part("index", nil))), one(part("+", one(numLit(1)))))), one(returnStmt(lexReq(one(part("InterpStringToken", cons(lexReq(one(part("line", nil))), cons(lexReq(one(part("column", nil))), one(lexReq(one(part("value", nil)))))))))))))))), one(part("else", one(block(nil, one(assn(lexReq(one(part("value", nil))), dotReq(lexReq(one(part("value", nil))), one(part("++", one(dotReq(lexReq(one(part("source", nil))), one(part("at", one(lexReq(one(part("index", nil)))))))))))))))))))))))))))))))), cons(assn(lexReq(one(part("escaped", nil))), lexReq(one(part("escapeNext", nil)))), one(assn(lexReq(one(part("index", nil))), dotReq(lexReq(one(part("index", nil))), one(part("+", one(numLit(1))))))))))))))))), cons(assn(lexReq(one(part("index", nil))), dotReq(lexReq(one(part("index", nil))), one(part("+", one(numLit(1)))))), one(returnStmt(lexReq(one(part("StringToken", cons(lexReq(one(part("line", nil))), cons(lexReq(one(part("column", nil))), one(lexReq(one(part("value", nil)))))))))))))))), cons(methDec(one(part("startStringAt", one(identifierDeclaration("pos", nil)))), nil, nil, cons(assn(lexReq(one(part("index", nil))), lexReq(one(part("pos", nil)))), one(assn(lexReq(one(part("currentToken", nil))), lexReq(one(part("lexString", nil))))))), cons(methDec(one(part("windback", one(identifierDeclaration("pos", nil)))), nil, nil, one(assn(lexReq(one(part("index", nil))), lexReq(one(part("pos", nil)))))), cons(methDec(one(part("expectToken", one(identifierDeclaration("nature", nil)))), nil, nil, one(lexReq(cons(part("if", one(dotReq(dotReq(lexReq(one(part("currentToken", nil))), one(part("nature", nil))), one(part("!=", one(lexReq(one(part("nature", nil))))))))), one(part("then", one(block(nil, cons(lexReq(one(part("print", one(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(dotReq(strLit("Expected "), one(part("++", one(lexReq(one(part("nature", nil))))))), one(part("++", one(strLit(" but got "))))), one(part("++", one(dotReq(lexReq(one(part("currentToken", nil))), one(part("nature", nil))))))), one(part("++", one(strLit(" at "))))), one(part("++", one(dotReq(lexReq(one(part("currentToken", nil))), one(part("line", nil))))))), one(part("++", one(strLit(":"))))), one(part("++", one(dotReq(lexReq(one(part("currentToken", nil))), one(part("column", nil))))))))))), one(lexReq(one(part("parseError", cons(dotReq(lexReq(one(part("currentToken", nil))), one(part("line", nil))), cons(dotReq(lexReq(one(part("currentToken", nil))), one(part("column", nil))), one(dotReq(dotReq(dotReq(strLit("Expected "), one(part("++", one(lexReq(one(part("nature", nil))))))), one(part("++", one(strLit(" but got "))))), one(part("++", one(dotReq(lexReq(one(part("currentToken", nil))), one(part("nature", nil))))))))))))))))))))))), cons(methDec(one(part("expectSymbol", one(identifierDeclaration("nature", nil)))), nil, nil, one(lexReq(cons(part("if", one(dotReq(dotReq(lexReq(one(part("currentToken", nil))), one(part("nature", nil))), one(part("!=", one(lexReq(one(part("nature", nil))))))))), one(part("then", one(block(nil, one(lexReq(one(part("parseError", cons(dotReq(lexReq(one(part("currentToken", nil))), one(part("line", nil))), cons(dotReq(lexReq(one(part("currentToken", nil))), one(part("column", nil))), one(dotReq(dotReq(dotReq(strLit("Expected "), one(part("++", one(lexReq(one(part("nature", nil))))))), one(part("++", one(strLit(" but got "))))), one(part("++", one(dotReq(lexReq(one(part("currentToken", nil))), one(part("nature", nil)))))))))))))))))))))), one(methDec(one(part("expectKeyword", one(identifierDeclaration("val", nil)))), nil, nil, cons(lexReq(cons(part("if", one(dotReq(dotReq(lexReq(one(part("currentToken", nil))), one(part("nature", nil))), one(part("!=", one(strLit("KEYWORD"))))))), one(part("then", one(block(nil, one(lexReq(one(part("parseError", cons(dotReq(lexReq(one(part("currentToken", nil))), one(part("line", nil))), cons(dotReq(lexReq(one(part("currentToken", nil))), one(part("column", nil))), one(dotReq(strLit("Expected KEYWORD but got "), one(part("++", one(dotReq(lexReq(one(part("currentToken", nil))), one(part("nature", nil)))))))))))))))))))), one(lexReq(cons(part("if", one(dotReq(dotReq(lexReq(one(part("currentToken", nil))), one(part("value", nil))), one(part("!=", one(lexReq(one(part("val", nil))))))))), one(part("then", one(block(nil, one(lexReq(one(part("parseError", cons(dotReq(lexReq(one(part("currentToken", nil))), one(part("line", nil))), cons(dotReq(lexReq(one(part("currentToken", nil))), one(part("column", nil))), one(dotReq(dotReq(dotReq(strLit("Expected "), one(part("++", one(lexReq(one(part("val", nil))))))), one(part("++", one(strLit(" but got "))))), one(part("++", one(dotReq(lexReq(one(part("currentToken", nil))), one(part("value", nil))))))))))))))))))))))))))))))))))))))), nil))), cons(methDec(one(part("digitToNumber", cons(identifierDeclaration("token", nil), one(identifierDeclaration("c", nil))))), nil, nil, cons(lexReq(cons(part("if", one(dotReq(lexReq(one(part("c", nil))), one(part("==", one(strLit("1"))))))), one(part("then", one(block(nil, one(returnStmt(numLit(1))))))))), cons(lexReq(cons(part("if", one(dotReq(lexReq(one(part("c", nil))), one(part("==", one(strLit("2"))))))), one(part("then", one(block(nil, one(returnStmt(numLit(2))))))))), cons(lexReq(cons(part("if", one(dotReq(lexReq(one(part("c", nil))), one(part("==", one(strLit("3"))))))), one(part("then", one(block(nil, one(returnStmt(numLit(3))))))))), cons(lexReq(cons(part("if", one(dotReq(lexReq(one(part("c", nil))), one(part("==", one(strLit("4"))))))), one(part("then", one(block(nil, one(returnStmt(numLit(4))))))))), cons(lexReq(cons(part("if", one(dotReq(lexReq(one(part("c", nil))), one(part("==", one(strLit("5"))))))), one(part("then", one(block(nil, one(returnStmt(numLit(5))))))))), cons(lexReq(cons(part("if", one(dotReq(lexReq(one(part("c", nil))), one(part("==", one(strLit("6"))))))), one(part("then", one(block(nil, one(returnStmt(numLit(6))))))))), cons(lexReq(cons(part("if", one(dotReq(lexReq(one(part("c", nil))), one(part("==", one(strLit("7"))))))), one(part("then", one(block(nil, one(returnStmt(numLit(7))))))))), cons(lexReq(cons(part("if", one(dotReq(lexReq(one(part("c", nil))), one(part("==", one(strLit("8"))))))), one(part("then", one(block(nil, one(returnStmt(numLit(8))))))))), cons(lexReq(cons(part("if", one(dotReq(lexReq(one(part("c", nil))), one(part("==", one(strLit("9"))))))), one(part("then", one(block(nil, one(returnStmt(numLit(9))))))))), cons(lexReq(cons(part("if", one(dotReq(lexReq(one(part("c", nil))), one(part("==", one(strLit("0"))))))), one(part("then", one(block(nil, one(returnStmt(numLit(0))))))))), one(lexReq(one(part("parseError", cons(dotReq(lexReq(one(part("token", nil))), one(part("line", nil))), cons(dotReq(lexReq(one(part("token", nil))), one(part("column", nil))), one(dotReq(strLit("Unexpected digit: "), one(part("++", one(dotReq(lexReq(one(part("c", nil))), one(part("asString", nil))))))))))))))))))))))))), cons(methDec(one(part("parseNumber", one(identifierDeclaration("lxr", nil)))), nil, nil, cons(defDec("token", nil, nil, dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil)))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(defDec("s", nil, nil, dotReq(lexReq(one(part("token", nil))), one(part("value", nil)))), cons(varDec("val", nil, nil, one(numLit(0))), cons(varDec("index", nil, nil, one(numLit(1))), cons(lexReq(cons(part("while", one(block(nil, one(dotReq(lexReq(one(part("index", nil))), one(part("<=", one(dotReq(lexReq(one(part("s", nil))), one(part("size", nil))))))))))), one(part("do", one(block(nil, cons(lexReq(cons(part("if", one(dotReq(dotReq(lexReq(one(part("s", nil))), one(part("at", one(lexReq(one(part("index", nil))))))), one(part("==", one(strLit("."))))))), cons(part("then", one(block(nil, cons(assn(lexReq(one(part("index", nil))), dotReq(lexReq(one(part("index", nil))), one(part("+", one(numLit(1)))))), cons(varDec("frac", nil, nil, one(numLit(0))), cons(varDec("scale", nil, nil, one(numLit(1))), cons(lexReq(cons(part("while", one(block(nil, one(dotReq(lexReq(one(part("index", nil))), one(part("<=", one(dotReq(lexReq(one(part("s", nil))), one(part("size", nil))))))))))), one(part("do", one(block(nil, cons(assn(lexReq(one(part("frac", nil))), dotReq(dotReq(lexReq(one(part("frac", nil))), one(part("*", one(numLit(10))))), one(part("+", one(lexReq(one(part("digitToNumber", cons(lexReq(one(part("token", nil))), one(dotReq(lexReq(one(part("s", nil))), one(part("at", one(lexReq(one(part("index", nil))))))))))))))))), cons(assn(lexReq(one(part("scale", nil))), dotReq(lexReq(one(part("scale", nil))), one(part("*", one(numLit(10)))))), one(assn(lexReq(one(part("index", nil))), dotReq(lexReq(one(part("index", nil))), one(part("+", one(numLit(1))))))))))))))), one(assn(lexReq(one(part("val", nil))), dotReq(lexReq(one(part("val", nil))), one(part("+", one(dotReq(lexReq(one(part("frac", nil))), one(part("/", one(lexReq(one(part("scale", nil)))))))))))))))))))), one(part("else", one(block(nil, one(assn(lexReq(one(part("val", nil))), dotReq(dotReq(lexReq(one(part("val", nil))), one(part("*", one(numLit(10))))), one(part("+", one(lexReq(one(part("digitToNumber", cons(lexReq(one(part("token", nil))), one(dotReq(lexReq(one(part("s", nil))), one(part("at", one(lexReq(one(part("index", nil))))))))))))))))))))))))), one(assn(lexReq(one(part("index", nil))), dotReq(lexReq(one(part("index", nil))), one(part("+", one(numLit(1)))))))))))))), one(dotReq(lexReq(one(part("ast", nil))), one(part("numberNode", one(lexReq(one(part("val", nil))))))))))))))), cons(methDec(one(part("parseString", one(identifierDeclaration("lxr", nil)))), nil, nil, cons(defDec("token", nil, nil, dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil)))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), one(lexReq(cons(part("if", one(dotReq(dotReq(lexReq(one(part("token", nil))), one(part("nature", nil))), one(part("==", one(strLit("INTERPSTRING"))))))), cons(part("then", one(block(nil, cons(defDec("interpExpr", nil, nil, lexReq(one(part("parseExpression", one(lexReq(one(part("lxr", nil)))))))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("expectSymbol", one(strLit("RBRACE"))))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("startStringAt", one(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("index", nil))))))), cons(defDec("nextStr", nil, nil, lexReq(one(part("parseString", one(lexReq(one(part("lxr", nil)))))))), one(dotReq(lexReq(one(part("ast", nil))), one(part("interpString", cons(dotReq(lexReq(one(part("token", nil))), one(part("value", nil))), cons(lexReq(one(part("interpExpr", nil))), one(lexReq(one(part("nextStr", nil))))))))))))))))), one(part("else", one(block(nil, one(dotReq(lexReq(one(part("ast", nil))), one(part("stringNode", one(dotReq(lexReq(one(part("token", nil))), one(part("value", nil))))))))))))))))))), cons(methDec(one(part("parselexicalRequestNoBlock", cons(identifierDeclaration("lxr", nil), one(identifierDeclaration("id", nil))))), nil, nil, cons(defDec("pos", nil, nil, dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("location", nil)))), cons(defDec("parts", nil, nil, lexReq(one(part("parseparts", cons(lexReq(one(part("lxr", nil))), one(lexReq(one(part("false", nil))))))))), one(dotReq(lexReq(one(part("ast", nil))), one(part("lexicalRequest", cons(lexReq(one(part("pos", nil))), one(lexReq(one(part("parts", nil)))))))))))), cons(methDec(one(part("parselexicalRequest", one(identifierDeclaration("lxr", nil)))), nil, nil, cons(defDec("pos", nil, nil, dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("location", nil)))), cons(defDec("parts", nil, nil, lexReq(one(part("parseparts", cons(lexReq(one(part("lxr", nil))), one(lexReq(one(part("true", nil))))))))), one(dotReq(lexReq(one(part("ast", nil))), one(part("lexicalRequest", cons(lexReq(one(part("pos", nil))), one(lexReq(one(part("parts", nil)))))))))))), cons(methDec(one(part("parseparts", cons(identifierDeclaration("lxr", nil), one(identifierDeclaration("allowBlock", nil))))), nil, nil, cons(varDec("parts", nil, nil, one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))), cons(lexReq(cons(part("while", one(block(nil, one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("IDENTIFIER"))))))))), one(part("do", one(block(nil, cons(varDec("id", nil, nil, one(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("value", nil))))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), one(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("LPAREN"))))))), cons(part("then", one(block(nil, cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(varDec("args", nil, nil, one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))), cons(lexReq(cons(part("while", one(block(nil, one(dotReq(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("!=", one(strLit("RPAREN"))))), one(part("&&", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("!=", one(strLit("EOF"))))))))))))), one(part("do", one(block(nil, cons(assn(lexReq(one(part("args", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("parseExpression", one(lexReq(one(part("lxr", nil))))))), one(lexReq(one(part("args", nil))))))))), one(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("COMMA"))))))), one(part("then", one(block(nil, one(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil)))))))))))))))))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(defDec("part", nil, nil, dotReq(lexReq(one(part("ast", nil))), one(part("part", cons(lexReq(one(part("id", nil))), one(dotReq(lexReq(one(part("args", nil))), one(part("reversed", one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))))))))))), one(assn(lexReq(one(part("parts", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("part", nil))), one(lexReq(one(part("parts", nil)))))))))))))))))), cons(part("elseif", one(block(nil, one(dotReq(lexReq(one(part("allowBlock", nil))), one(part("&&", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("LBRACE"))))))))))))), cons(part("then", one(block(nil, cons(defDec("blk", nil, nil, lexReq(one(part("parseblock", one(lexReq(one(part("lxr", nil)))))))), cons(defDec("part", nil, nil, dotReq(lexReq(one(part("ast", nil))), one(part("part", cons(lexReq(one(part("id", nil))), one(dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("blk", nil))), one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil)))))))))))))), one(assn(lexReq(one(part("parts", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("part", nil))), one(lexReq(one(part("parts", nil))))))))))))))), cons(part("elseif", one(block(nil, one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("NUMBER"))))))))), cons(part("then", one(block(nil, cons(defDec("num", nil, nil, lexReq(one(part("parseNumber", one(lexReq(one(part("lxr", nil)))))))), cons(defDec("part", nil, nil, dotReq(lexReq(one(part("ast", nil))), one(part("part", cons(lexReq(one(part("id", nil))), one(dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("num", nil))), one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil)))))))))))))), one(assn(lexReq(one(part("parts", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("part", nil))), one(lexReq(one(part("parts", nil))))))))))))))), cons(part("elseif", one(block(nil, one(dotReq(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("STRING"))))), one(part("||", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("INTERPSTRING"))))))))))))), cons(part("then", one(block(nil, cons(defDec("str", nil, nil, lexReq(one(part("parseString", one(lexReq(one(part("lxr", nil)))))))), cons(defDec("part", nil, nil, dotReq(lexReq(one(part("ast", nil))), one(part("part", cons(lexReq(one(part("id", nil))), one(dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("str", nil))), one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil)))))))))))))), one(assn(lexReq(one(part("parts", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("part", nil))), one(lexReq(one(part("parts", nil))))))))))))))), one(part("else", one(block(nil, cons(defDec("part", nil, nil, dotReq(lexReq(one(part("ast", nil))), one(part("part", cons(lexReq(one(part("id", nil))), one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))))))), cons(assn(lexReq(one(part("parts", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("part", nil))), one(lexReq(one(part("parts", nil))))))))), one(returnStmt(dotReq(lexReq(one(part("parts", nil))), one(part("reversed", one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))))))))))))))))))))))))))))))), one(dotReq(lexReq(one(part("parts", nil))), one(part("reversed", one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))))))))), cons(methDec(one(part("parseexplicitRequestNoBlock", cons(identifierDeclaration("receiver", nil), one(identifierDeclaration("lxr", nil))))), nil, nil, cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(defDec("pos", nil, nil, dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("location", nil)))), cons(defDec("parts", nil, nil, lexReq(one(part("parseparts", cons(lexReq(one(part("lxr", nil))), one(lexReq(one(part("false", nil))))))))), one(dotReq(lexReq(one(part("ast", nil))), one(part("explicitRequest", cons(lexReq(one(part("pos", nil))), cons(lexReq(one(part("receiver", nil))), one(lexReq(one(part("parts", nil)))))))))))))), cons(methDec(one(part("parseexplicitRequest", cons(identifierDeclaration("receiver", nil), one(identifierDeclaration("lxr", nil))))), nil, nil, cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(defDec("pos", nil, nil, dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("location", nil)))), cons(defDec("parts", nil, nil, lexReq(one(part("parseparts", cons(lexReq(one(part("lxr", nil))), one(lexReq(one(part("true", nil))))))))), one(dotReq(lexReq(one(part("ast", nil))), one(part("explicitRequest", cons(lexReq(one(part("pos", nil))), cons(lexReq(one(part("receiver", nil))), one(lexReq(one(part("parts", nil)))))))))))))), cons(methDec(one(part("parseTypeExpression", one(identifierDeclaration("lxr", nil)))), nil, nil, cons(defDec("token", nil, nil, dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil)))), cons(lexReq(cons(part("if", one(dotReq(dotReq(lexReq(one(part("token", nil))), one(part("nature", nil))), one(part("==", one(strLit("IDENTIFIER"))))))), one(part("then", one(block(nil, one(returnStmt(lexReq(one(part("parselexicalRequestNoBlock", cons(lexReq(one(part("lxr", nil))), one(dotReq(lexReq(one(part("token", nil))), one(part("value", nil)))))))))))))))), cons(lexReq(one(part("print", one(dotReq(strLit("Unexpected token: "), one(part("++", one(dotReq(lexReq(one(part("token", nil))), one(part("asString", nil))))))))))), one(lexReq(one(part("parseError", cons(dotReq(lexReq(one(part("token", nil))), one(part("line", nil))), cons(dotReq(lexReq(one(part("token", nil))), one(part("column", nil))), one(dotReq(strLit("Unexpected token: "), one(part("++", one(dotReq(lexReq(one(part("token", nil))), one(part("asString", nil)))))))))))))))))), cons(methDec(one(part("parseExpressionNoOpNoDot", one(identifierDeclaration("lxr", nil)))), nil, nil, cons(defDec("token", nil, nil, dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil)))), cons(lexReq(cons(part("if", one(dotReq(dotReq(lexReq(one(part("token", nil))), one(part("nature", nil))), one(part("==", one(strLit("NUMBER"))))))), one(part("then", one(block(nil, one(returnStmt(lexReq(one(part("parseNumber", one(lexReq(one(part("lxr", nil))))))))))))))), cons(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("token", nil))), one(part("nature", nil))), one(part("==", one(strLit("STRING"))))), one(part("||", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("INTERPSTRING"))))))))))), one(part("then", one(block(nil, one(returnStmt(lexReq(one(part("parseString", one(lexReq(one(part("lxr", nil))))))))))))))), cons(lexReq(cons(part("if", one(dotReq(dotReq(lexReq(one(part("token", nil))), one(part("nature", nil))), one(part("==", one(strLit("LPAREN"))))))), one(part("then", one(block(nil, cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(defDec("expr", nil, nil, lexReq(one(part("parseExpression", one(lexReq(one(part("lxr", nil)))))))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), one(returnStmt(lexReq(one(part("expr", nil)))))))))))))), cons(lexReq(cons(part("if", one(dotReq(dotReq(lexReq(one(part("token", nil))), one(part("nature", nil))), one(part("==", one(strLit("LBRACE"))))))), one(part("then", one(block(nil, one(returnStmt(lexReq(one(part("parseblock", one(lexReq(one(part("lxr", nil))))))))))))))), cons(lexReq(cons(part("if", one(dotReq(dotReq(lexReq(one(part("token", nil))), one(part("nature", nil))), one(part("==", one(strLit("IDENTIFIER"))))))), one(part("then", one(block(nil, one(returnStmt(lexReq(one(part("parselexicalRequest", one(lexReq(one(part("lxr", nil))))))))))))))), cons(lexReq(cons(part("if", one(dotReq(dotReq(lexReq(one(part("token", nil))), one(part("nature", nil))), one(part("==", one(strLit("KEYWORD"))))))), one(part("then", one(block(nil, one(lexReq(cons(part("if", one(dotReq(dotReq(lexReq(one(part("token", nil))), one(part("value", nil))), one(part("==", one(strLit("object"))))))), cons(part("then", one(block(nil, one(returnStmt(lexReq(one(part("parseObject", one(lexReq(one(part("lxr", nil)))))))))))), cons(part("elseif", one(block(nil, one(dotReq(dotReq(lexReq(one(part("token", nil))), one(part("value", nil))), one(part("==", one(strLit("self"))))))))), one(part("then", one(block(nil, cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), one(returnStmt(dotReq(lexReq(one(part("ast", nil))), one(part("lexicalRequest", cons(dotReq(lexReq(one(part("token", nil))), one(part("location", nil))), one(dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(dotReq(lexReq(one(part("ast", nil))), one(part("part", cons(strLit("self"), one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil)))))))), one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))))))))))))))))))))))))))))), cons(lexReq(cons(part("if", one(dotReq(dotReq(lexReq(one(part("token", nil))), one(part("nature", nil))), one(part("==", one(strLit("OPERATOR"))))))), one(part("then", one(block(nil, cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(defDec("pos", nil, nil, dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("asString", nil)))), cons(defDec("expr", nil, nil, lexReq(one(part("parseExpressionNoOp", one(lexReq(one(part("lxr", nil)))))))), one(returnStmt(dotReq(lexReq(one(part("ast", nil))), one(part("explicitRequest", cons(lexReq(one(part("pos", nil))), cons(lexReq(one(part("expr", nil))), one(dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(dotReq(lexReq(one(part("ast", nil))), one(part("part", cons(dotReq(strLit("prefix"), one(part("++", one(dotReq(lexReq(one(part("token", nil))), one(part("value", nil))))))), one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil)))))))), one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))))))))))))))))))))))), one(lexReq(one(part("parseError", cons(dotReq(lexReq(one(part("token", nil))), one(part("line", nil))), cons(dotReq(lexReq(one(part("token", nil))), one(part("column", nil))), one(dotReq(strLit("Unexpected token: "), one(part("++", one(dotReq(lexReq(one(part("token", nil))), one(part("asString", nil))))))))))))))))))))))), cons(methDec(one(part("parseExpressionNoOp", one(identifierDeclaration("lxr", nil)))), nil, nil, cons(varDec("left", nil, nil, one(lexReq(one(part("parseExpressionNoOpNoDot", one(lexReq(one(part("lxr", nil))))))))), cons(varDec("token", nil, nil, one(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))))), cons(lexReq(cons(part("while", one(block(nil, one(dotReq(dotReq(lexReq(one(part("token", nil))), one(part("nature", nil))), one(part("==", one(strLit("DOT"))))))))), one(part("do", one(block(nil, cons(assn(lexReq(one(part("left", nil))), lexReq(one(part("parseexplicitRequest", cons(lexReq(one(part("left", nil))), one(lexReq(one(part("lxr", nil))))))))), one(assn(lexReq(one(part("token", nil))), dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil)))))))))))), one(returnStmt(lexReq(one(part("left", nil))))))))), cons(methDec(one(part("parseExpression", one(identifierDeclaration("lxr", nil)))), nil, nil, cons(varDec("left", nil, nil, one(lexReq(one(part("parseExpressionNoOp", one(lexReq(one(part("lxr", nil))))))))), cons(varDec("token", nil, nil, one(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))))), cons(lexReq(cons(part("while", one(block(nil, one(dotReq(dotReq(lexReq(one(part("token", nil))), one(part("nature", nil))), one(part("==", one(strLit("OPERATOR"))))))))), one(part("do", one(block(nil, cons(defDec("pos", nil, nil, dotReq(lexReq(one(part("token", nil))), one(part("asString", nil)))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(defDec("right", nil, nil, lexReq(one(part("parseExpressionNoOp", one(lexReq(one(part("lxr", nil)))))))), cons(defDec("args", nil, nil, dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("right", nil))), one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))))))), cons(defDec("part", nil, nil, dotReq(lexReq(one(part("ast", nil))), one(part("part", cons(dotReq(lexReq(one(part("token", nil))), one(part("value", nil))), one(lexReq(one(part("args", nil))))))))), cons(defDec("parts", nil, nil, dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("part", nil))), one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))))))), cons(defDec("req", nil, nil, dotReq(lexReq(one(part("ast", nil))), one(part("explicitRequest", cons(lexReq(one(part("pos", nil))), cons(lexReq(one(part("left", nil))), one(dotReq(lexReq(one(part("parts", nil))), one(part("reversed", one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil)))))))))))))), cons(assn(lexReq(one(part("left", nil))), lexReq(one(part("req", nil)))), one(assn(lexReq(one(part("token", nil))), dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))))))))))))))))))), one(returnStmt(lexReq(one(part("left", nil))))))))), cons(methDec(one(part("parseReturnStatement", one(identifierDeclaration("lxr", nil)))), nil, nil, cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(defDec("val", nil, nil, lexReq(one(part("parseExpression", one(lexReq(one(part("lxr", nil)))))))), one(dotReq(lexReq(one(part("ast", nil))), one(part("returnStmt", one(lexReq(one(part("val", nil))))))))))), cons(methDec(one(part("parseStatement", one(identifierDeclaration("lxr", nil)))), nil, nil, cons(defDec("token", nil, nil, dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil)))), cons(lexReq(cons(part("if", one(dotReq(dotReq(lexReq(one(part("token", nil))), one(part("nature", nil))), one(part("==", one(strLit("KEYWORD"))))))), cons(part("then", one(block(nil, cons(lexReq(cons(part("if", one(dotReq(dotReq(lexReq(one(part("token", nil))), one(part("value", nil))), one(part("==", one(strLit("return"))))))), one(part("then", one(block(nil, one(returnStmt(lexReq(one(part("parseReturnStatement", one(lexReq(one(part("lxr", nil))))))))))))))), cons(lexReq(cons(part("if", one(dotReq(dotReq(lexReq(one(part("token", nil))), one(part("value", nil))), one(part("==", one(strLit("var"))))))), one(part("then", one(block(nil, one(returnStmt(lexReq(one(part("parsevarDeclaration", one(lexReq(one(part("lxr", nil))))))))))))))), one(lexReq(cons(part("if", one(dotReq(dotReq(lexReq(one(part("token", nil))), one(part("value", nil))), one(part("==", one(strLit("def"))))))), one(part("then", one(block(nil, one(returnStmt(lexReq(one(part("parsedefDeclaration", one(lexReq(one(part("lxr", nil))))))))))))))))))))), cons(part("elseif", one(block(nil, one(dotReq(dotReq(lexReq(one(part("token", nil))), one(part("nature", nil))), one(part("==", one(strLit("COMMENT"))))))))), one(part("then", one(block(nil, cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("NEWLINE"))))))), one(part("then", one(block(nil, one(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil)))))))))), one(returnStmt(dotReq(lexReq(one(part("ast", nil))), one(part("comment", one(dotReq(lexReq(one(part("token", nil))), one(part("value", nil))))))))))))))))))), cons(varDec("exp", nil, nil, one(lexReq(one(part("parseExpression", one(lexReq(one(part("lxr", nil))))))))), cons(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("ASSIGN"))))))), one(part("then", one(block(nil, cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(defDec("val", nil, nil, lexReq(one(part("parseExpression", one(lexReq(one(part("lxr", nil)))))))), one(assn(lexReq(one(part("exp", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("assign", cons(lexReq(one(part("exp", nil))), one(lexReq(one(part("val", nil)))))))))))))))))), cons(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("NEWLINE"))))))), one(part("then", one(block(nil, one(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil)))))))))), one(lexReq(one(part("exp", nil)))))))))), cons(methDec(one(part("parseblock", one(identifierDeclaration("lxr", nil)))), nil, nil, cons(varDec("params", nil, nil, one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))), cons(varDec("body", nil, nil, one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))), cons(defDec("indentBefore", nil, nil, lexReq(one(part("indentColumn", nil)))), cons(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("LBRACE"))))))), one(part("then", one(block(nil, cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(lexReq(cons(part("while", one(block(nil, one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("NEWLINE"))))))))), one(part("do", one(block(nil, one(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil)))))))))), cons(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("!=", one(strLit("RBRACE"))))))), one(part("then", one(block(nil, cons(defDec("firstTok", nil, nil, dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil)))), cons(assn(lexReq(one(part("indentColumn", nil))), dotReq(lexReq(one(part("firstTok", nil))), one(part("column", nil)))), cons(defDec("first", nil, nil, lexReq(one(part("parseStatement", one(lexReq(one(part("lxr", nil)))))))), cons(defDec("after", nil, nil, dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil)))), one(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(dotReq(lexReq(one(part("after", nil))), one(part("nature", nil))), one(part("==", one(strLit("COLON"))))), one(part("||", one(dotReq(dotReq(lexReq(one(part("after", nil))), one(part("nature", nil))), one(part("==", one(strLit("ARROW"))))))))), one(part("||", one(dotReq(dotReq(lexReq(one(part("after", nil))), one(part("nature", nil))), one(part("==", one(strLit("COMMA"))))))))))), cons(part("then", one(block(nil, cons(comment(" Parameter list"), cons(varDec("prm", nil, nil, one(lexReq(one(part("first", nil))))), cons(varDec("tp", nil, nil, one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))), cons(lexReq(cons(part("if", one(dotReq(dotReq(lexReq(one(part("after", nil))), one(part("nature", nil))), one(part("==", one(strLit("COLON"))))))), one(part("then", one(block(nil, cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), one(assn(lexReq(one(part("tp", nil))), lexReq(one(part("parseTypeExpression", one(lexReq(one(part("lxr", nil)))))))))))))))), cons(comment("prm := ast.identifierDeclaration(prm, tp)"), cons(assn(lexReq(one(part("params", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("prm", nil))), one(lexReq(one(part("params", nil))))))))), cons(lexReq(cons(part("while", one(block(nil, one(dotReq(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("!=", one(strLit("ARROW"))))), one(part("&&", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("!=", one(strLit("RBRACE"))))))))))))), one(part("do", one(block(nil, cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), one(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("NEWLINE"))))))), cons(part("then", one(block(nil, one(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))))))), one(part("else", one(block(nil, cons(assn(lexReq(one(part("prm", nil))), lexReq(one(part("parseExpressionNoOpNoDot", one(lexReq(one(part("lxr", nil)))))))), cons(assn(lexReq(one(part("tp", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil)))), cons(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("COLON"))))))), one(part("then", one(block(nil, cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), one(assn(lexReq(one(part("tp", nil))), lexReq(one(part("parseTypeExpression", one(lexReq(one(part("lxr", nil)))))))))))))))), cons(comment("prm := ast.identifierDeclaration(prm, tp)"), one(assn(lexReq(one(part("params", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("prm", nil))), one(lexReq(one(part("params", nil))))))))))))))))))))))))))))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("expectToken", one(strLit("ARROW"))))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), one(lexReq(cons(part("while", one(block(nil, one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("NEWLINE"))))))))), one(part("do", one(block(nil, one(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))))))))))))))))))))))), one(part("else", one(block(nil, cons(assn(lexReq(one(part("indentColumn", nil))), lexReq(one(part("indentBefore", nil)))), one(assn(lexReq(one(part("body", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("first", nil))), one(lexReq(one(part("body", nil))))))))))))))))))))))))))))), cons(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("SEMICOLON"))))))), one(part("then", one(block(nil, cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), one(dotReq(lexReq(one(part("lxr", nil))), one(part("expectToken", one(strLit("NEWLINE"))))))))))))), cons(lexReq(cons(part("while", one(block(nil, one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("NEWLINE"))))))))), one(part("do", one(block(nil, one(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil)))))))))), cons(lexReq(cons(part("while", one(block(nil, one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("!=", one(strLit("RBRACE"))))))))), one(part("do", one(block(nil, cons(assn(lexReq(one(part("indentColumn", nil))), dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("column", nil)))), cons(lexReq(cons(part("if", one(dotReq(lexReq(one(part("indentColumn", nil))), one(part("<=", one(lexReq(one(part("indentBefore", nil))))))))), one(part("then", one(block(nil, one(lexReq(one(part("parseError", cons(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("line", nil))), cons(lexReq(one(part("indentColumn", nil))), one(dotReq(dotReq(dotReq(dotReq(dotReq(strLit("Indentation must increase inside block body. Expected at least column "), one(part("++", one(dotReq(lexReq(one(part("indentBefore", nil))), one(part("+", one(numLit(1))))))))), one(part("++", one(strLit(" on line "))))), one(part("++", one(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("line", nil))))))), one(part("++", one(strLit(" but got "))))), one(part("++", one(lexReq(one(part("indentColumn", nil)))))))))))))))))))), cons(assn(lexReq(one(part("body", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("parseStatement", one(lexReq(one(part("lxr", nil))))))), one(lexReq(one(part("body", nil))))))))), cons(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("SEMICOLON"))))))), one(part("then", one(block(nil, cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), one(dotReq(lexReq(one(part("lxr", nil))), one(part("expectToken", one(strLit("NEWLINE"))))))))))))), one(lexReq(cons(part("while", one(block(nil, one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("NEWLINE"))))))))), one(part("do", one(block(nil, one(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))))))))))))))))))))), one(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil)))))))))))))))), cons(assn(lexReq(one(part("indentColumn", nil))), lexReq(one(part("indentBefore", nil)))), one(dotReq(lexReq(one(part("ast", nil))), one(part("block", cons(dotReq(lexReq(one(part("params", nil))), one(part("reversed", one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))))), one(dotReq(lexReq(one(part("body", nil))), one(part("reversed", one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))))))))))))))))), cons(methDec(one(part("parseAnnotations", one(identifierDeclaration("lxr", nil)))), nil, nil, cons(varDec("anns", nil, nil, one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(lexReq(cons(part("while", one(block(nil, one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("IDENTIFIER"))))))))), one(part("do", one(block(nil, cons(assn(lexReq(one(part("anns", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("value", nil))), one(lexReq(one(part("anns", nil))))))))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), one(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("COMMA"))))))), one(part("then", one(block(nil, one(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))))))))))))))))))), one(dotReq(lexReq(one(part("anns", nil))), one(part("reversed", one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil)))))))))))), cons(methDec(one(part("parsedefDeclaration", one(identifierDeclaration("lxr", nil)))), nil, nil, cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("expectToken", one(strLit("IDENTIFIER"))))), cons(defDec("name", nil, nil, dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("value", nil)))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(varDec("dtype", nil, nil, one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))), cons(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("COLON"))))))), one(part("then", one(block(nil, cons(comment(" Type annotation"), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), one(assn(lexReq(one(part("dtype", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("parseExpression", one(lexReq(one(part("lxr", nil))))))), one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil)))))))))))))))))), cons(varDec("anns", nil, nil, one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))), cons(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("KEYWORD"))))))), one(part("then", one(block(nil, one(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("value", nil))), one(part("==", one(strLit("is"))))))), one(part("then", one(block(nil, one(assn(lexReq(one(part("anns", nil))), lexReq(one(part("parseAnnotations", one(lexReq(one(part("lxr", nil)))))))))))))))))))))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(defDec("val", nil, nil, lexReq(one(part("parseExpression", one(lexReq(one(part("lxr", nil)))))))), one(dotReq(lexReq(one(part("ast", nil))), one(part("defDecl", cons(lexReq(one(part("name", nil))), cons(lexReq(one(part("dtype", nil))), cons(lexReq(one(part("anns", nil))), one(lexReq(one(part("val", nil)))))))))))))))))))))), cons(methDec(one(part("parsevarDeclaration", one(identifierDeclaration("lxr", nil)))), nil, nil, cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("expectToken", one(strLit("IDENTIFIER"))))), cons(defDec("name", nil, nil, dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("value", nil)))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(varDec("dtype", nil, nil, one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))), cons(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("COLON"))))))), one(part("then", one(block(nil, cons(comment(" Type annotation"), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), one(assn(lexReq(one(part("dtype", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("parseExpression", one(lexReq(one(part("lxr", nil))))))), one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil)))))))))))))))))), cons(varDec("anns", nil, nil, one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))), cons(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("KEYWORD"))))))), one(part("then", one(block(nil, one(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("value", nil))), one(part("==", one(strLit("is"))))))), one(part("then", one(block(nil, one(assn(lexReq(one(part("anns", nil))), lexReq(one(part("parseAnnotations", one(lexReq(one(part("lxr", nil)))))))))))))))))))))), one(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("ASSIGN"))))))), cons(part("then", one(block(nil, cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(defDec("val", nil, nil, lexReq(one(part("parseExpression", one(lexReq(one(part("lxr", nil)))))))), one(dotReq(lexReq(one(part("ast", nil))), one(part("varDecl", cons(lexReq(one(part("name", nil))), cons(lexReq(one(part("dtype", nil))), cons(lexReq(one(part("anns", nil))), one(dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("val", nil))), one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))))))))))))))))))), one(part("else", one(block(nil, one(dotReq(lexReq(one(part("ast", nil))), one(part("varDecl", cons(lexReq(one(part("name", nil))), cons(lexReq(one(part("dtype", nil))), cons(lexReq(one(part("anns", nil))), one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil)))))))))))))))))))))))))))), cons(methDec(one(part("parseMethodBody", one(identifierDeclaration("lxr", nil)))), nil, nil, cons(varDec("body", nil, nil, one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(defDec("indentBefore", nil, nil, lexReq(one(part("indentColumn", nil)))), cons(lexReq(cons(part("while", one(block(nil, one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("!=", one(strLit("RBRACE"))))))))), one(part("do", one(block(nil, cons(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("SEMICOLON"))))))), one(part("then", one(block(nil, cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), one(dotReq(lexReq(one(part("lxr", nil))), one(part("expectToken", one(strLit("NEWLINE"))))))))))))), one(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("NEWLINE"))))))), cons(part("then", one(block(nil, one(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))))))), one(part("else", one(block(nil, cons(assn(lexReq(one(part("indentColumn", nil))), dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("column", nil)))), cons(lexReq(cons(part("if", one(dotReq(lexReq(one(part("indentColumn", nil))), one(part("<=", one(lexReq(one(part("indentBefore", nil))))))))), one(part("then", one(block(nil, one(lexReq(one(part("parseError", cons(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("line", nil))), cons(lexReq(one(part("indentColumn", nil))), one(dotReq(dotReq(dotReq(dotReq(dotReq(strLit("Indentation must increase inside method body. Expected at least column "), one(part("++", one(dotReq(lexReq(one(part("indentBefore", nil))), one(part("+", one(numLit(1))))))))), one(part("++", one(strLit(" on line "))))), one(part("++", one(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("line", nil))))))), one(part("++", one(strLit(" but got "))))), one(part("++", one(lexReq(one(part("indentColumn", nil)))))))))))))))))))), one(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("KEYWORD"))))))), cons(part("then", one(block(nil, one(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("value", nil))), one(part("==", one(strLit("var"))))))), cons(part("then", one(block(nil, cons(defDec("dec", nil, nil, lexReq(one(part("parsevarDeclaration", one(lexReq(one(part("lxr", nil)))))))), one(assn(lexReq(one(part("body", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("dec", nil))), one(lexReq(one(part("body", nil)))))))))))))), cons(part("elseif", one(block(nil, one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("value", nil))), one(part("==", one(strLit("def"))))))))), cons(part("then", one(block(nil, cons(defDec("dec", nil, nil, lexReq(one(part("parsedefDeclaration", one(lexReq(one(part("lxr", nil)))))))), one(assn(lexReq(one(part("body", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("dec", nil))), one(lexReq(one(part("body", nil)))))))))))))), one(part("else", one(block(nil, one(assn(lexReq(one(part("body", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("parseStatement", one(lexReq(one(part("lxr", nil))))))), one(lexReq(one(part("body", nil))))))))))))))))))))))), one(part("else", one(block(nil, one(assn(lexReq(one(part("body", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("parseStatement", one(lexReq(one(part("lxr", nil))))))), one(lexReq(one(part("body", nil))))))))))))))))))))))))))))))))))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(assn(lexReq(one(part("indentColumn", nil))), lexReq(one(part("indentBefore", nil)))), one(dotReq(lexReq(one(part("body", nil))), one(part("reversed", one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))))))))))))), cons(methDec(one(part("parseMethodDeclaration", one(identifierDeclaration("lxr", nil)))), nil, nil, cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(varDec("parts", nil, nil, one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))), cons(lexReq(cons(part("while", one(block(nil, one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("IDENTIFIER"))))))))), one(part("do", one(block(nil, cons(defDec("id", nil, nil, dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("value", nil)))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), one(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("LPAREN"))))))), cons(part("then", one(block(nil, cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(varDec("args", nil, nil, one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))), cons(lexReq(cons(part("while", one(block(nil, one(dotReq(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("!=", one(strLit("RPAREN"))))), one(part("&&", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("!=", one(strLit("EOF"))))))))))))), one(part("do", one(block(nil, cons(dotReq(lexReq(one(part("lxr", nil))), one(part("expectToken", one(strLit("IDENTIFIER"))))), cons(defDec("idToken", nil, nil, dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil)))), cons(varDec("dtype", nil, nil, one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("COLON"))))))), one(part("then", one(block(nil, cons(comment(" Type annotation"), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), one(assn(lexReq(one(part("dtype", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("parseTypeExpression", one(lexReq(one(part("lxr", nil))))))), one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil)))))))))))))))))), cons(assn(lexReq(one(part("args", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(dotReq(lexReq(one(part("ast", nil))), one(part("identifierDeclaration", cons(dotReq(lexReq(one(part("idToken", nil))), one(part("value", nil))), one(lexReq(one(part("dtype", nil)))))))), one(lexReq(one(part("args", nil))))))))), one(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("COMMA"))))))), one(part("then", one(block(nil, one(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))))))))))))))))))))))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(defDec("part", nil, nil, dotReq(lexReq(one(part("ast", nil))), one(part("part", cons(lexReq(one(part("id", nil))), one(dotReq(lexReq(one(part("args", nil))), one(part("reversed", one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))))))))))), one(assn(lexReq(one(part("parts", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("part", nil))), one(lexReq(one(part("parts", nil)))))))))))))))))), one(part("else", one(block(nil, cons(defDec("part", nil, nil, dotReq(lexReq(one(part("ast", nil))), one(part("part", cons(lexReq(one(part("id", nil))), one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))))))), one(assn(lexReq(one(part("parts", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("part", nil))), one(lexReq(one(part("parts", nil))))))))))))))))))))))))))), cons(varDec("dtype", nil, nil, one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))), cons(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("ARROW"))))))), one(part("then", one(block(nil, cons(comment(" Type annotation"), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), one(assn(lexReq(one(part("dtype", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("parseTypeExpression", one(lexReq(one(part("lxr", nil))))))), one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil)))))))))))))))))), cons(varDec("anns", nil, nil, one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))), cons(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("KEYWORD"))))))), one(part("then", one(block(nil, one(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("value", nil))), one(part("==", one(strLit("is"))))))), one(part("then", one(block(nil, one(assn(lexReq(one(part("anns", nil))), lexReq(one(part("parseAnnotations", one(lexReq(one(part("lxr", nil)))))))))))))))))))))), cons(comment("lxr.advance"), cons(defDec("body", nil, nil, lexReq(one(part("parseMethodBody", one(lexReq(one(part("lxr", nil)))))))), one(dotReq(lexReq(one(part("ast", nil))), one(part("methodDecl", cons(dotReq(lexReq(one(part("parts", nil))), one(part("reversed", one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))))), cons(lexReq(one(part("dtype", nil))), cons(lexReq(one(part("anns", nil))), one(lexReq(one(part("body", nil))))))))))))))))))))), cons(methDec(one(part("parseClassDeclaration", one(identifierDeclaration("lxr", nil)))), nil, nil, cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(varDec("parts", nil, nil, one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))), cons(lexReq(cons(part("while", one(block(nil, one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("IDENTIFIER"))))))))), one(part("do", one(block(nil, cons(defDec("id", nil, nil, dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("value", nil)))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), one(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("LPAREN"))))))), cons(part("then", one(block(nil, cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(varDec("args", nil, nil, one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))), cons(lexReq(cons(part("while", one(block(nil, one(dotReq(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("!=", one(strLit("RPAREN"))))), one(part("&&", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("!=", one(strLit("EOF"))))))))))))), one(part("do", one(block(nil, cons(varDec("dtype", nil, nil, one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))), cons(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("COLON"))))))), one(part("then", one(block(nil, cons(comment(" Type annotation"), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), one(assn(lexReq(one(part("dtype", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("parseTypeExpression", one(lexReq(one(part("lxr", nil))))))), one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil)))))))))))))))))), cons(assn(lexReq(one(part("args", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(dotReq(lexReq(one(part("ast", nil))), one(part("identifierDeclaration", cons(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("value", nil))), one(lexReq(one(part("dtype", nil)))))))), one(lexReq(one(part("args", nil))))))))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), one(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("COMMA"))))))), one(part("then", one(block(nil, one(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))))))))))))))))))))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(defDec("part", nil, nil, dotReq(lexReq(one(part("ast", nil))), one(part("part", cons(lexReq(one(part("id", nil))), one(dotReq(lexReq(one(part("args", nil))), one(part("reversed", one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))))))))))), one(assn(lexReq(one(part("parts", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("part", nil))), one(lexReq(one(part("parts", nil)))))))))))))))))), one(part("else", one(block(nil, cons(defDec("part", nil, nil, dotReq(lexReq(one(part("ast", nil))), one(part("part", cons(lexReq(one(part("id", nil))), one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))))))), one(assn(lexReq(one(part("parts", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("part", nil))), one(lexReq(one(part("parts", nil))))))))))))))))))))))))))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(defDec("body", nil, nil, lexReq(one(part("parseObjectBody", one(lexReq(one(part("lxr", nil)))))))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(defDec("obj", nil, nil, dotReq(lexReq(one(part("ast", nil))), one(part("objectConstructor", cons(lexReq(one(part("body", nil))), one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))))))), one(dotReq(lexReq(one(part("ast", nil))), one(part("methodDecl", cons(dotReq(lexReq(one(part("parts", nil))), one(part("reversed", one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))))), cons(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))), cons(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))), one(dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("obj", nil))), one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil)))))))))))))))))))))))), cons(methDec(one(part("parseImport", one(identifierDeclaration("lxr", nil)))), nil, nil, cons(dotReq(lexReq(one(part("lxr", nil))), one(part("expectKeyword", one(strLit("import"))))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("expectToken", one(strLit("STRING"))))), cons(defDec("src", nil, nil, dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("value", nil)))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("expectToken", one(strLit("IDENTIFIER"))))), cons(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("value", nil))), one(part("!=", one(strLit("as"))))))), one(part("then", one(block(nil, one(lexReq(one(part("parseError", cons(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("line", nil))), cons(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("column", nil))), one(strLit("Expected 'as' in import")))))))))))))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("expectToken", one(strLit("IDENTIFIER"))))), cons(defDec("name", nil, nil, dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("value", nil)))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(varDec("ident", nil, nil, nil), cons(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("COLON"))))))), cons(part("then", one(block(nil, cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(defDec("aType", nil, nil, lexReq(one(part("parseTypeExpression", one(lexReq(one(part("lxr", nil)))))))), one(assn(lexReq(one(part("ident", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("identifierDeclaration", cons(lexReq(one(part("name", nil))), one(lexReq(one(part("aType", nil))))))))))))))), one(part("else", one(block(nil, one(assn(lexReq(one(part("ident", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("identifierDeclaration", cons(lexReq(one(part("name", nil))), one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))))))))))))))), one(dotReq(lexReq(one(part("ast", nil))), one(part("importStmt", cons(lexReq(one(part("src", nil))), one(lexReq(one(part("ident", nil))))))))))))))))))))))), cons(methDec(one(part("parseObjectBody", one(identifierDeclaration("lxr", nil)))), nil, nil, cons(varDec("body", nil, nil, one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))), cons(varDec("token", nil, nil, one(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))))), cons(defDec("indentBefore", nil, nil, lexReq(one(part("indentColumn", nil)))), cons(lexReq(cons(part("while", one(block(nil, one(dotReq(dotReq(dotReq(lexReq(one(part("token", nil))), one(part("nature", nil))), one(part("!=", one(strLit("EOF"))))), one(part("&&", one(dotReq(dotReq(lexReq(one(part("token", nil))), one(part("nature", nil))), one(part("!=", one(strLit("RBRACE"))))))))))))), one(part("do", one(block(nil, cons(assn(lexReq(one(part("indentColumn", nil))), dotReq(lexReq(one(part("token", nil))), one(part("column", nil)))), cons(lexReq(cons(part("if", one(dotReq(dotReq(lexReq(one(part("indentColumn", nil))), one(part("<=", one(lexReq(one(part("indentBefore", nil))))))), one(part("&&", one(dotReq(dotReq(lexReq(one(part("token", nil))), one(part("nature", nil))), one(part("!=", one(strLit("NEWLINE"))))))))))), one(part("then", one(block(nil, one(lexReq(one(part("parseError", cons(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("line", nil))), cons(lexReq(one(part("indentColumn", nil))), one(dotReq(dotReq(dotReq(dotReq(dotReq(strLit("Indentation must increase inside object body. Expected at least column "), one(part("++", one(dotReq(lexReq(one(part("indentBefore", nil))), one(part("+", one(numLit(1))))))))), one(part("++", one(strLit(" on line "))))), one(part("++", one(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("line", nil))))))), one(part("++", one(strLit(" but got "))))), one(part("++", one(lexReq(one(part("indentColumn", nil)))))))))))))))))))), cons(lexReq(cons(part("if", one(dotReq(dotReq(lexReq(one(part("token", nil))), one(part("nature", nil))), one(part("==", one(strLit("SEMICOLON"))))))), one(part("then", one(block(nil, cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(assn(lexReq(one(part("token", nil))), dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil)))), one(dotReq(lexReq(one(part("lxr", nil))), one(part("expectToken", one(strLit("NEWLINE")))))))))))))), cons(lexReq(cons(part("if", one(dotReq(dotReq(lexReq(one(part("token", nil))), one(part("nature", nil))), one(part("==", one(strLit("NEWLINE"))))))), cons(part("then", one(block(nil, one(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))))))), cons(part("elseif", one(block(nil, one(dotReq(dotReq(lexReq(one(part("token", nil))), one(part("nature", nil))), one(part("==", one(strLit("KEYWORD"))))))))), cons(part("then", one(block(nil, one(lexReq(cons(part("if", one(dotReq(dotReq(lexReq(one(part("token", nil))), one(part("value", nil))), one(part("==", one(strLit("var"))))))), cons(part("then", one(block(nil, cons(defDec("dec", nil, nil, lexReq(one(part("parsevarDeclaration", one(lexReq(one(part("lxr", nil)))))))), one(assn(lexReq(one(part("body", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("dec", nil))), one(lexReq(one(part("body", nil)))))))))))))), cons(part("elseif", one(block(nil, one(dotReq(dotReq(lexReq(one(part("token", nil))), one(part("value", nil))), one(part("==", one(strLit("def"))))))))), cons(part("then", one(block(nil, cons(defDec("dec", nil, nil, lexReq(one(part("parsedefDeclaration", one(lexReq(one(part("lxr", nil)))))))), one(assn(lexReq(one(part("body", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("dec", nil))), one(lexReq(one(part("body", nil)))))))))))))), cons(part("elseif", one(block(nil, one(dotReq(dotReq(lexReq(one(part("token", nil))), one(part("value", nil))), one(part("==", one(strLit("method"))))))))), cons(part("then", one(block(nil, cons(defDec("dec", nil, nil, lexReq(one(part("parseMethodDeclaration", one(lexReq(one(part("lxr", nil)))))))), one(assn(lexReq(one(part("body", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("dec", nil))), one(lexReq(one(part("body", nil)))))))))))))), cons(part("elseif", one(block(nil, one(dotReq(dotReq(lexReq(one(part("token", nil))), one(part("value", nil))), one(part("==", one(strLit("class"))))))))), cons(part("then", one(block(nil, cons(defDec("dec", nil, nil, lexReq(one(part("parseClassDeclaration", one(lexReq(one(part("lxr", nil)))))))), one(assn(lexReq(one(part("body", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("dec", nil))), one(lexReq(one(part("body", nil)))))))))))))), one(part("else", one(block(nil, one(lexReq(cons(part("if", one(dotReq(dotReq(lexReq(one(part("token", nil))), one(part("value", nil))), one(part("==", one(strLit("import"))))))), cons(part("then", one(block(nil, cons(defDec("imp", nil, nil, lexReq(one(part("parseImport", one(lexReq(one(part("lxr", nil)))))))), one(assn(lexReq(one(part("body", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("imp", nil))), one(lexReq(one(part("body", nil)))))))))))))), one(part("else", one(block(nil, cons(defDec("stmt", nil, nil, lexReq(one(part("parseStatement", one(lexReq(one(part("lxr", nil)))))))), one(assn(lexReq(one(part("body", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("stmt", nil))), one(lexReq(one(part("body", nil)))))))))))))))))))))))))))))))))))), one(part("else", one(block(nil, cons(defDec("stmt", nil, nil, lexReq(one(part("parseStatement", one(lexReq(one(part("lxr", nil)))))))), one(assn(lexReq(one(part("body", nil))), dotReq(lexReq(one(part("ast", nil))), one(part("cons", cons(lexReq(one(part("stmt", nil))), one(lexReq(one(part("body", nil)))))))))))))))))))), one(assn(lexReq(one(part("token", nil))), dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))))))))))))))), cons(assn(lexReq(one(part("indentColumn", nil))), lexReq(one(part("indentBefore", nil)))), one(dotReq(lexReq(one(part("body", nil))), one(part("reversed", one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil)))))))))))))), cons(methDec(one(part("parseObject", one(identifierDeclaration("lxr", nil)))), nil, nil, cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(varDec("anns", nil, nil, one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))), cons(lexReq(cons(part("if", one(dotReq(dotReq(dotReq(lexReq(one(part("lxr", nil))), one(part("current", nil))), one(part("nature", nil))), one(part("==", one(strLit("KEYWORD"))))))), one(part("then", one(block(nil, cons(dotReq(lexReq(one(part("lxr", nil))), one(part("expectKeyword", one(strLit("is"))))), one(assn(lexReq(one(part("anns", nil))), lexReq(one(part("parseAnnotations", one(lexReq(one(part("lxr", nil)))))))))))))))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), cons(defDec("body", nil, nil, lexReq(one(part("parseObjectBody", one(lexReq(one(part("lxr", nil)))))))), cons(dotReq(lexReq(one(part("lxr", nil))), one(part("advance", nil))), one(dotReq(lexReq(one(part("ast", nil))), one(part("objectConstructor", cons(lexReq(one(part("body", nil))), one(lexReq(one(part("anns", nil)))))))))))))))), cons(methDec(one(part("parseError", cons(identifierDeclaration("line", nil), cons(identifierDeclaration("column", nil), one(identifierDeclaration("message", nil)))))), nil, nil, cons(lexReq(one(part("print", one(interpStr("Parse error: ", lexReq(one(part("message", nil))), interpStr(" at ", lexReq(one(part("modulePrefix", nil))), interpStr("", lexReq(one(part("line", nil))), interpStr(":", lexReq(one(part("column", nil))), strLit(""))))))))), one(dotReq(dotReq(lexReq(one(part("Exception", nil))), one(part("refine", one(strLit("ParseError"))))), one(part("raise", one(dotReq(dotReq(dotReq(dotReq(dotReq(lexReq(one(part("modulePrefix", nil))), one(part("++", one(lexReq(one(part("line", nil))))))), one(part("++", one(strLit(":"))))), one(part("++", one(lexReq(one(part("column", nil))))))), one(part("++", one(strLit(": "))))), one(part("++", one(lexReq(one(part("message", nil)))))))))))))), cons(methDec(one(part("parse", one(identifierDeclaration("code", nil)))), nil, nil, cons(assn(lexReq(one(part("indentColumn", nil))), numLit(0)), cons(defDec("lxr", nil, nil, lexReq(one(part("lexer", one(lexReq(one(part("code", nil)))))))), cons(defDec("body", nil, nil, lexReq(one(part("parseObjectBody", one(lexReq(one(part("lxr", nil)))))))), one(dotReq(lexReq(one(part("ast", nil))), one(part("objectConstructor", cons(lexReq(one(part("body", nil))), one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil))))))))))))), one(methDec(one(part("parseModule", cons(identifierDeclaration("module", nil), one(identifierDeclaration("code", nil))))), nil, nil, cons(assn(lexReq(one(part("modulePrefix", nil))), dotReq(lexReq(one(part("module", nil))), one(part("++", one(strLit(":")))))), cons(assn(lexReq(one(part("indentColumn", nil))), numLit(0)), cons(defDec("lxr", nil, nil, lexReq(one(part("lexer", one(lexReq(one(part("code", nil)))))))), cons(defDec("body", nil, nil, lexReq(one(part("parseObjectBody", one(lexReq(one(part("lxr", nil)))))))), one(dotReq(lexReq(one(part("ast", nil))), one(part("objectConstructor", cons(lexReq(one(part("body", nil))), one(dotReq(lexReq(one(part("ast", nil))), one(part("nil", nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), nil);
}